
Driver_file.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000001ce  2**0
                  ALLOC
  2 .stab         000003b4  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000069c  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

int count=0;


int main()
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	SREG=(1<<7);
  84:	ef e5       	ldi	r30, 0x5F	; 95
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 e8       	ldi	r24, 0x80	; 128
  8a:	80 83       	st	Z, r24
	DDRC=0XFF; //8 pins 4 for decoder 4 for enabling 4 screens
  8c:	e4 e3       	ldi	r30, 0x34	; 52
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	80 83       	st	Z, r24
	PORTC=((1<<4)|(1<<5)|(1<<6)|(1<<7));
  94:	e5 e3       	ldi	r30, 0x35	; 53
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 ef       	ldi	r24, 0xF0	; 240
  9a:	80 83       	st	Z, r24
	MCUCR|=((1<<ISC11)|(1<<ISC01));  //Falling edge trigger INT0 and INT1
  9c:	a5 e5       	ldi	r26, 0x55	; 85
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	e5 e5       	ldi	r30, 0x55	; 85
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	8a 60       	ori	r24, 0x0A	; 10
  a8:	8c 93       	st	X, r24
	GICR|=((1<<INT0)|(1<<INT1)); //INT0.INT1 enabled
  aa:	ab e5       	ldi	r26, 0x5B	; 91
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	eb e5       	ldi	r30, 0x5B	; 91
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 6c       	ori	r24, 0xC0	; 192
  b6:	8c 93       	st	X, r24
	TCCR0|=(1<<CS00);
  b8:	a3 e5       	ldi	r26, 0x53	; 83
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	e3 e5       	ldi	r30, 0x53	; 83
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	8c 93       	st	X, r24
	TIMSK|=(1<<TOIE0);
  c6:	a9 e5       	ldi	r26, 0x59	; 89
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	e9 e5       	ldi	r30, 0x59	; 89
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	8c 93       	st	X, r24
	while(1)
	{
		if(count==4000&&PORTC<255)
  d4:	80 91 60 00 	lds	r24, 0x0060
  d8:	90 91 61 00 	lds	r25, 0x0061
  dc:	2f e0       	ldi	r18, 0x0F	; 15
  de:	80 3a       	cpi	r24, 0xA0	; 160
  e0:	92 07       	cpc	r25, r18
  e2:	79 f4       	brne	.+30     	; 0x102 <main+0x86>
  e4:	e5 e3       	ldi	r30, 0x35	; 53
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	8f 3f       	cpi	r24, 0xFF	; 255
  ec:	51 f0       	breq	.+20     	; 0x102 <main+0x86>
		{
			PORTC++;
  ee:	e5 e3       	ldi	r30, 0x35	; 53
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 83       	st	Z, r24
			count=0;
  f8:	10 92 61 00 	sts	0x0061, r1
  fc:	10 92 60 00 	sts	0x0060, r1
 100:	e9 cf       	rjmp	.-46     	; 0xd4 <main+0x58>
		}
		else if(PORTC==250)
 102:	e5 e3       	ldi	r30, 0x35	; 53
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8a 3f       	cpi	r24, 0xFA	; 250
 10a:	21 f7       	brne	.-56     	; 0xd4 <main+0x58>
			PORTC&=~((1<<0)|(1<<1)|(1<<2)|(1<<3));
 10c:	a5 e3       	ldi	r26, 0x35	; 53
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	e5 e3       	ldi	r30, 0x35	; 53
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	80 7f       	andi	r24, 0xF0	; 240
 118:	8c 93       	st	X, r24
 11a:	dc cf       	rjmp	.-72     	; 0xd4 <main+0x58>

0000011c <__vector_9>:


	return 0;
}
ISR(TIMER0_OVF_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	df 93       	push	r29
 12c:	cf 93       	push	r28
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
	count++;
 132:	80 91 60 00 	lds	r24, 0x0060
 136:	90 91 61 00 	lds	r25, 0x0061
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	90 93 61 00 	sts	0x0061, r25
 140:	80 93 60 00 	sts	0x0060, r24
}
 144:	cf 91       	pop	r28
 146:	df 91       	pop	r29
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
